name: 'Terraform PR Preview'

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-pr:
    name: 'Terraform PR Preview'
    runs-on: ubuntu-latest
    env:
      TF_CLOUD_ORGANIZATION: "your-org-name" # Replace with your org name
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      TF_WORKSPACE: "eigen-flux"
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.5.7"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Generate a detailed speculative plan with color output
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan -no-color 2>&1 | tee plan_output.txt
          echo "::set-output name=exitcode::$?"
        continue-on-error: true

      # Create a summary of resources to be created/changed/destroyed
      - name: Generate Plan Summary
        id: summary
        run: |
          RESOURCES_SUMMARY=$(grep -E '(# [a-zA-Z0-9_\[\]\.\-]+ will be|Plan:)' plan_output.txt | sed 's/^/  /')
          echo "RESOURCES_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$RESOURCES_SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Create a machine-readable JSON output of the plan
      - name: Generate JSON Plan
        id: json-plan
        run: terraform show -json tfplan > plan.json
        continue-on-error: true

      # Show human-readable plan 
      - name: Show Plan
        id: show
        run: terraform show -no-color tfplan > readable_plan.txt
        continue-on-error: true

      # Post detailed comment to PR
      - name: Post PR Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let planOutput = '';
            try {
              planOutput = fs.readFileSync('readable_plan.txt', 'utf8');
            } catch (error) {
              planOutput = 'Error: Unable to read plan output';
            }
            
            let planSummary = process.env.RESOURCES_SUMMARY || 'No changes detected';
            
            const output = `## Terraform Plan Summary for PR #${{ github.event.pull_request.number }}
            
            ### Format and Validation Results
            - Format check: \`${{ steps.fmt.outcome }}\`
            - Initialization: \`${{ steps.init.outcome }}\`
            - Validation: \`${{ steps.validate.outcome }}\`
            
            ### Resources Summary
            \`\`\`
            ${planSummary}
            \`\`\`
            
            <details><summary>Show Full Plan Details</summary>
            
            \`\`\`hcl
            ${planOutput}
            \`\`\`
            
            </details>
            
            *This plan was generated by GitHub Actions workflow triggered by @${{ github.actor }}*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Determine if the plan has changes
      - name: Check Plan Status
        if: steps.plan.outputs.exitcode == '2'
        run: |
          echo "::notice ::Plan contains changes that would be applied"
          exit 0